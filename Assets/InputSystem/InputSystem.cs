//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Ready"",
            ""id"": ""1ff2ae11-9b12-4a0b-a0d1-2a3df6fc9b4b"",
            ""actions"": [
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""cb395235-ead3-4f2d-816a-db3cc1da5bb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9f259d2-e291-4460-bf80-6bb32dc4bd6a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8b6d4f2-e338-4c04-bf1e-5467c781032b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""635c68df-cade-47f6-8258-0eeb048e5a75"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""da3b01fd-9ff5-42b8-b6cb-73d8eed58a66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d4de8e3b-8588-4703-b289-39dbcd86db22"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6082d5d-681a-41d8-8f62-43c04f5593b3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Air"",
            ""id"": ""9a6106bd-2720-4b0b-8fed-49ee08beecc1"",
            ""actions"": [
                {
                    ""name"": ""Parry"",
                    ""type"": ""Button"",
                    ""id"": ""b610e421-ac20-46cf-aa53-48ec090a4d93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""2a09a6f3-d8cc-4a56-aaf4-29742574bf9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e78aba46-e0b7-4f08-849c-60b1bb8c3a2b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Parry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f64b3eba-d128-4b0f-a8f5-5a79c4d1919c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Parry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""843d7b88-462e-4043-92e4-1662ca3fe8f0"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3fed16f-3a1b-4c2d-9750-e87144b767dd"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Next"",
            ""id"": ""1ad2d9c2-9ef7-425d-9be7-27bcd340340f"",
            ""actions"": [
                {
                    ""name"": ""NextScene"",
                    ""type"": ""Button"",
                    ""id"": ""220e442f-2a19-4bab-a411-d0fe70a3b736"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce48c8f4-65ae-493d-92cb-0aaffbaf85ee"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ready
        m_Ready = asset.FindActionMap("Ready", throwIfNotFound: true);
        m_Ready_Throw = m_Ready.FindAction("Throw", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Pause = m_Pause.FindAction("Pause", throwIfNotFound: true);
        // Air
        m_Air = asset.FindActionMap("Air", throwIfNotFound: true);
        m_Air_Parry = m_Air.FindAction("Parry", throwIfNotFound: true);
        m_Air_Stop = m_Air.FindAction("Stop", throwIfNotFound: true);
        // Next
        m_Next = asset.FindActionMap("Next", throwIfNotFound: true);
        m_Next_NextScene = m_Next.FindAction("NextScene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ready
    private readonly InputActionMap m_Ready;
    private List<IReadyActions> m_ReadyActionsCallbackInterfaces = new List<IReadyActions>();
    private readonly InputAction m_Ready_Throw;
    public struct ReadyActions
    {
        private @InputSystem m_Wrapper;
        public ReadyActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throw => m_Wrapper.m_Ready_Throw;
        public InputActionMap Get() { return m_Wrapper.m_Ready; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ReadyActions set) { return set.Get(); }
        public void AddCallbacks(IReadyActions instance)
        {
            if (instance == null || m_Wrapper.m_ReadyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ReadyActionsCallbackInterfaces.Add(instance);
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
        }

        private void UnregisterCallbacks(IReadyActions instance)
        {
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
        }

        public void RemoveCallbacks(IReadyActions instance)
        {
            if (m_Wrapper.m_ReadyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IReadyActions instance)
        {
            foreach (var item in m_Wrapper.m_ReadyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ReadyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ReadyActions @Ready => new ReadyActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private List<IPauseActions> m_PauseActionsCallbackInterfaces = new List<IPauseActions>();
    private readonly InputAction m_Pause_Pause;
    public struct PauseActions
    {
        private @InputSystem m_Wrapper;
        public PauseActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Pause_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void AddCallbacks(IPauseActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPauseActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Air
    private readonly InputActionMap m_Air;
    private List<IAirActions> m_AirActionsCallbackInterfaces = new List<IAirActions>();
    private readonly InputAction m_Air_Parry;
    private readonly InputAction m_Air_Stop;
    public struct AirActions
    {
        private @InputSystem m_Wrapper;
        public AirActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Parry => m_Wrapper.m_Air_Parry;
        public InputAction @Stop => m_Wrapper.m_Air_Stop;
        public InputActionMap Get() { return m_Wrapper.m_Air; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AirActions set) { return set.Get(); }
        public void AddCallbacks(IAirActions instance)
        {
            if (instance == null || m_Wrapper.m_AirActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AirActionsCallbackInterfaces.Add(instance);
            @Parry.started += instance.OnParry;
            @Parry.performed += instance.OnParry;
            @Parry.canceled += instance.OnParry;
            @Stop.started += instance.OnStop;
            @Stop.performed += instance.OnStop;
            @Stop.canceled += instance.OnStop;
        }

        private void UnregisterCallbacks(IAirActions instance)
        {
            @Parry.started -= instance.OnParry;
            @Parry.performed -= instance.OnParry;
            @Parry.canceled -= instance.OnParry;
            @Stop.started -= instance.OnStop;
            @Stop.performed -= instance.OnStop;
            @Stop.canceled -= instance.OnStop;
        }

        public void RemoveCallbacks(IAirActions instance)
        {
            if (m_Wrapper.m_AirActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAirActions instance)
        {
            foreach (var item in m_Wrapper.m_AirActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AirActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AirActions @Air => new AirActions(this);

    // Next
    private readonly InputActionMap m_Next;
    private List<INextActions> m_NextActionsCallbackInterfaces = new List<INextActions>();
    private readonly InputAction m_Next_NextScene;
    public struct NextActions
    {
        private @InputSystem m_Wrapper;
        public NextActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextScene => m_Wrapper.m_Next_NextScene;
        public InputActionMap Get() { return m_Wrapper.m_Next; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NextActions set) { return set.Get(); }
        public void AddCallbacks(INextActions instance)
        {
            if (instance == null || m_Wrapper.m_NextActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NextActionsCallbackInterfaces.Add(instance);
            @NextScene.started += instance.OnNextScene;
            @NextScene.performed += instance.OnNextScene;
            @NextScene.canceled += instance.OnNextScene;
        }

        private void UnregisterCallbacks(INextActions instance)
        {
            @NextScene.started -= instance.OnNextScene;
            @NextScene.performed -= instance.OnNextScene;
            @NextScene.canceled -= instance.OnNextScene;
        }

        public void RemoveCallbacks(INextActions instance)
        {
            if (m_Wrapper.m_NextActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INextActions instance)
        {
            foreach (var item in m_Wrapper.m_NextActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NextActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NextActions @Next => new NextActions(this);
    public interface IReadyActions
    {
        void OnThrow(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IAirActions
    {
        void OnParry(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
    }
    public interface INextActions
    {
        void OnNextScene(InputAction.CallbackContext context);
    }
}
