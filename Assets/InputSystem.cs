//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Ready"",
            ""id"": ""1ff2ae11-9b12-4a0b-a0d1-2a3df6fc9b4b"",
            ""actions"": [
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""cb395235-ead3-4f2d-816a-db3cc1da5bb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9f259d2-e291-4460-bf80-6bb32dc4bd6a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8b6d4f2-e338-4c04-bf1e-5467c781032b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ready
        m_Ready = asset.FindActionMap("Ready", throwIfNotFound: true);
        m_Ready_Throw = m_Ready.FindAction("Throw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ready
    private readonly InputActionMap m_Ready;
    private List<IReadyActions> m_ReadyActionsCallbackInterfaces = new List<IReadyActions>();
    private readonly InputAction m_Ready_Throw;
    public struct ReadyActions
    {
        private @InputSystem m_Wrapper;
        public ReadyActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throw => m_Wrapper.m_Ready_Throw;
        public InputActionMap Get() { return m_Wrapper.m_Ready; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ReadyActions set) { return set.Get(); }
        public void AddCallbacks(IReadyActions instance)
        {
            if (instance == null || m_Wrapper.m_ReadyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ReadyActionsCallbackInterfaces.Add(instance);
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
        }

        private void UnregisterCallbacks(IReadyActions instance)
        {
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
        }

        public void RemoveCallbacks(IReadyActions instance)
        {
            if (m_Wrapper.m_ReadyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IReadyActions instance)
        {
            foreach (var item in m_Wrapper.m_ReadyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ReadyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ReadyActions @Ready => new ReadyActions(this);
    public interface IReadyActions
    {
        void OnThrow(InputAction.CallbackContext context);
    }
}
